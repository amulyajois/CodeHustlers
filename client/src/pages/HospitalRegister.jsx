import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import '../styles/HospitalRegister.css';

// States and their respective districts
const statesAndDistricts = {
  "Andhra Pradesh": ["Anantapur", "Chittoor", "Guntur", "Kadapa", "Krishna", "Nellore", "Prakasam", "Srikakulam", "Visakhapatnam", "Vizianagaram", "West Godavari", "East Godavari"],
  "Arunachal Pradesh": ["Tawang", "West Kameng", "East Kameng", "Papum Pare", "Kurung Kumey", "Lower Subansiri"],
  "Assam": ["Dibrugarh", "Kamrup", "Nagaon", "Sonitpur", "Tinsukia"],
  "Bihar": ["Patna", "Gaya", "Bhagalpur", "Muzaffarpur"],
  "Chhattisgarh": ["Raipur", "Bilaspur", "Durg"],
  "Delhi": ["New Delhi", "North Delhi", "South Delhi", "East Delhi", "West Delhi"],
  "Goa": ["North Goa", "South Goa"],
  "Gujarat": ["Ahmedabad", "Surat", "Vadodara", "Rajkot"],
  "Haryana": ["Gurgaon", "Faridabad", "Panipat", "Ambala"],
  "Himachal Pradesh": ["Shimla", "Kangra", "Mandi", "Solan"],
  "Jharkhand": ["Ranchi", "Jamshedpur", "Dhanbad"],
  "Karnataka": ["Bangalore", "Mysore", "Udupi", "Mangalore", "Belgaum"],
  "Kerala": ["Thiruvananthapuram", "Kochi", "Kozhikode", "Thrissur"],
  "Madhya Pradesh": ["Bhopal", "Indore", "Gwalior", "Jabalpur"],
  "Maharashtra": ["Mumbai", "Pune", "Nagpur", "Nashik"],
  "Manipur": ["Imphal"],
  "Meghalaya": ["Shillong"],
  "Mizoram": ["Aizawl"],
  "Nagaland": ["Kohima", "Dimapur"],
  "Odisha": ["Bhubaneswar", "Cuttack", "Rourkela"],
  "Punjab": ["Amritsar", "Ludhiana", "Patiala"],
  "Rajasthan": ["Jaipur", "Jodhpur", "Udaipur"],
  "Sikkim": ["Gangtok"],
  "Tamil Nadu": ["Chennai", "Coimbatore", "Madurai"],
  "Telangana": ["Hyderabad", "Warangal"],
  "Tripura": ["Agartala"],
  "Uttar Pradesh": ["Lucknow", "Kanpur", "Agra", "Varanasi"],
  "Uttarakhand": ["Dehradun", "Haridwar"],
  "West Bengal": ["Kolkata", "Howrah", "Durgapur"]
};

const RegisterHospital = () => {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    hospitalName: '',
    email: '',
    state: '',
    district: '',
    password: '',
    confirmPassword: '',
    termsAccepted: false,
    hospitalId: '' // Add a field for Hospital ID if needed in future (e.g., generated by the backend)
  });

  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const validatePassword = (password) => {
    // Password validation regex to include at least one letter, one number, one special character, and a minimum of 8 characters
    const regex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/;
    return regex.test(password);
  };

  const validateEmail = (email) => {
    // Email validation regex
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value.trimStart(),
      ...(name === "state" ? { district: '' } : {}) // Clear district when state changes
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    // Trim the form data to prevent any unnecessary whitespace
    const trimmedFormData = {
      ...formData,
      hospitalName: formData.hospitalName.trim(),
      email: formData.email.trim(),
      state: formData.state.trim(),
      district: formData.district.trim(),
      password: formData.password.trim(),
      confirmPassword: formData.confirmPassword.trim()
    };

    // Validate passwords match
    if (trimmedFormData.password !== trimmedFormData.confirmPassword) {
      setError("Passwords do not match.");
      return;
    }

    // Validate password strength
    if (!validatePassword(trimmedFormData.password)) {
      setError("Password must be at least 8 characters, with 1 letter, 1 number, and 1 special character.");
      return;
    }

    // Validate email
    if (!validateEmail(trimmedFormData.email)) {
      setError("Please enter a valid email address.");
      return;
    }

    // Validate terms acceptance
    if (!trimmedFormData.termsAccepted) {
      setError("You must agree to the terms.");
      return;
    }

    setLoading(true);

    try {
      // POST the data, and the backend should generate the hospitalId
      const response = await fetch("http://localhost:5000/api/hospital/register", {
        method: "POST",  // Ensure this is a POST request
        headers: { 
          "Content-Type": "application/json"  // Set content type to JSON
        },
        body: JSON.stringify({
          hospitalName: trimmedFormData.hospitalName,  // Hospital name from the form
          email: trimmedFormData.email,  // Email from the form
          state: trimmedFormData.state,  // State selected from the form
          district: trimmedFormData.district,  // District selected from the form
          password: trimmedFormData.password  // Password from the form
        })
      });

      const data = await response.json();

      if (response.ok) {
        const { hospitalId } = data;

        if (!hospitalId) {
          console.error("Hospital ID missing in backend response:", data);
          setError("Hospital ID is missing. Please try registering again.");
          return;
        }

        setFormData(prevData => ({
          ...prevData,
          hospitalId
        }));

        alert("Registration successful! Please login.");
        navigate("/login/hospital");
      } else {
        console.error("Backend error:", data);
        setError(data.message || "Registration failed. Please check your details.");
      }

    } catch (err) {
      console.error("Error during registration:", err);
      setError("Something went wrong. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="register-container">
      <form className="register-form" onSubmit={handleSubmit}>
        <h2 className="logo">MediMeet</h2>
        <h3>HOSPITAL REGISTRATION</h3>

        {error && <p className="error">{error}</p>}

        {/* Hospital Name */}
        <input type="text" name="hospitalName" value={formData.hospitalName} onChange={handleChange} placeholder="Enter hospital name" required />

        {/* Email Address */}
        <input type="email" name="email" value={formData.email} onChange={handleChange} placeholder="Enter email address" required />

        {/* State Selection */}
        <select name="state" value={formData.state} onChange={handleChange} required>
          <option value="">Select State</option>
          {Object.keys(statesAndDistricts).map((state) => (
            <option key={state} value={state}>{state}</option>
          ))}
        </select>

        {/* District Selection (dependent on State) */}
        <select name="district" value={formData.district} onChange={handleChange} required disabled={!formData.state}>
          <option value="">{formData.state ? "Select District" : "Select State First"}</option>
          {formData.state && statesAndDistricts[formData.state].map((district) => (
            <option key={district} value={district}>{district}</option>
          ))}
        </select>

        {/* Password Field */}
        <input type="password" name="password" value={formData.password} onChange={handleChange} placeholder="Create a password" required />

        {/* Confirm Password Field */}
        <input type="password" name="confirmPassword" value={formData.confirmPassword} onChange={handleChange} placeholder="Confirm your password" required />

        {/* Terms Acceptance Checkbox */}
        <div className="terms">
          <input type="checkbox" id="terms" name="termsAccepted" checked={formData.termsAccepted} onChange={handleChange} />
          <label htmlFor="terms">
  I agree to the <a href="/terms.html"  rel="noopener noreferrer">terms and privacy policy</a>
</label>
        </div>

        {/* Submit Button */}
        <button type="submit" disabled={loading}>
          {loading ? "Registering..." : "Register"}
        </button>

        <p>Already have an account? <a href="/login/hospital">Login</a></p>
      </form>
    </div>
  );
};

export default RegisterHospital;
